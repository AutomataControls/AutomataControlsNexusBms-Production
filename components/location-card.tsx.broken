// components/LocationCard.tsx
"use client";

import React, { useState, useEffect, useMemo, useCallback, memo } from "react";
// Remove the problematic destructuring line
import { useRouter } from "next/navigation";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Building, Thermometer, Droplet, Fan, AlertTriangle,
    Wrench, Activity, Clock, Loader2
} from "lucide-react";
import { useFirebase, type FirebaseContextType } from "@/lib/firebase-context";
import {
    collection, query, where, getDocs, doc, getDoc,
    type DocumentData, type QueryDocumentSnapshot, type Firestore
} from "firebase/firestore";
import { ref, onValue, off, type DatabaseReference } from "firebase/database";
import { secondaryDb } from "@/lib/secondary-firebase";

const LOG_PREFIX = "[LocationCard_MaxDefensive]";

interface LocationData {
  equipmentCount: number;
  alarmCount: number;
  displayItems: any[];
  technicians: any[];
}

interface LocationCardProps {
  location: {
    id: string;
    name: string;
    displayItems?: string[];
  };
}

export const LocationCard = memo(function LocationCard({ location }: LocationCardProps) {
  const firebaseContext = useFirebase();

  const [locationData, setLocationData] = useState<LocationData | null>(null);
  const [realtimeSystems, setRealtimeSystems] = useState<{ [key: string]: any }>({});
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const locationId = location.id;
  const displayItemsString = useMemo(() => JSON.stringify(location.displayItems || []), [location.displayItems]);

  useEffect(() => {
    if (!firebaseContext) {
      console.warn(LOG_PREFIX, `Firestore effect: Firebase context is NULL for ${locationId}. Waiting for context.`);
      setIsLoading(true);
      return;
    }

    const { db, fetchCachedData, isInitialized, isLoadingConfig } = firebaseContext;

    if (!isInitialized || isLoadingConfig) {
        setIsLoading(true);
        return;
    }

    if (!db || typeof fetchCachedData !== 'function' || !locationId) {
      console.error(LOG_PREFIX, `CRITICAL: Prerequisites not met for Firestore fetch for ${locationId}. DB: ${!!db}, fetchCachedData type: ${typeof fetchCachedData}, locationId: ${!!locationId}`);
      setError(db && fetchCachedData ? "Location ID missing." : "Database services not properly initialized or available via context.");
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    setError(null);

    const fetchData = async () => {
      const firestoreDbInstance = db as Firestore;
      const equipmentQuery = query(collection(firestoreDbInstance, "equipment"), where("locationId", "==", locationId));
      const alarmsQuery = query(collection(firestoreDbInstance, "alarms"), where("locationId", "==", locationId), where("active", "==", true));
      const techniciansQuery = query(collection(firestoreDbInstance, "technicians"), where("assignedLocations", "array-contains", locationId));
      const currentDisplayItems = JSON.parse(displayItemsString) as string[];
      const displayItemPromises = (currentDisplayItems || []).map(itemId => {
        if (!itemId || typeof itemId !== 'string') {
            console.warn(LOG_PREFIX, `Invalid itemId in displayItems for ${locationId}:`, itemId);
            return Promise.resolve(null);
        }
        return getDoc(doc(firestoreDbInstance, "equipment", itemId));
      });
      try {
        const [equipmentSnapshot, alarmSnapshot, techniciansSnapshot, ...displayItemSnaps] = await Promise.all([
          getDocs(equipmentQuery), getDocs(alarmsQuery), getDocs(techniciansQuery), ...displayItemPromises
        ]);
        const items = displayItemSnaps.filter((snap): snap is QueryDocumentSnapshot<DocumentData> => snap !== null && snap.exists()).map(snap => ({ id: snap!.id, ...snap!.data() }));
        const techniciansData = techniciansSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
        return { equipmentCount: equipmentSnapshot.size, alarmCount: alarmSnapshot.size, displayItems: items, technicians: techniciansData };
      } catch (err: any) { console.error(LOG_PREFIX, `Error in fetchData Promise.all for ${locationId}:`, err); throw err; }
    };

    const cacheKey = `location_${locationId}_firestore_data`;
    fetchCachedData(cacheKey, fetchData, 5)
      .then(data => {
        if (data) {
          setLocationData(data);
        } else {
          setError("Failed to load location summary (no data returned).");
          console.warn(LOG_PREFIX, `fetchCachedData null for ${locationId}`);
        }
      })
      .catch(err => {
        console.error(LOG_PREFIX, `Error from fetchCachedData for ${locationId}:`, err.message, err);
        setError(`Data fetch failed: ${err.message ? err.message.substring(0,100) : 'Unknown'}`);
      })
      .finally(() => {
        setIsLoading(false);
      });

  }, [firebaseContext, locationId, displayItemsString]);

  // RTDB useEffect
  useEffect(() => {
    if (!secondaryDb || !locationId) return;

    let listener: ReturnType<typeof onValue> | undefined = undefined;
    let RtdbRef: DatabaseReference | undefined = undefined;

    try {
        RtdbRef = ref(secondaryDb, `locations/${locationId}/systems`);
        listener = onValue(RtdbRef,
            (snapshot) => { setRealtimeSystems(snapshot.val() || {}); },
            (errorObject) => { console.error(LOG_PREFIX, `RTDB error for ${locationId}:`, errorObject.message || errorObject); setError("RTDB Error."); }
        );
    } catch (e: any) {
        console.error(LOG_PREFIX, `Error setting up RTDB listener for ${locationId}:`, e.message);
        setError("RTDB Setup Error.");
    }
    return () => {
      if (RtdbRef && listener) {
        off(RtdbRef, 'value', listener);
      }
    };
  }, [secondaryDb, locationId]);

  const getEquipmentRealtimeData = useCallback((equipmentId: string, equipmentName?: string) => {
    if (realtimeSystems[equipmentId]) return realtimeSystems[equipmentId];
    if (equipmentName) {
        const lowerEquipmentName = equipmentName.toLowerCase();
        for (const [key, value] of Object.entries(realtimeSystems)) {
            if (key.toLowerCase() === lowerEquipmentName) return value;
        }
    }
    return null;
  }, [realtimeSystems]);

  const findMetric = useCallback((metrics: any, possibleNames: string[]) => {
    if (!metrics || typeof metrics !== 'object') return undefined;
    for (const name of possibleNames) if (metrics[name] !== undefined) return metrics[name];
    const lowerPossibleNames = possibleNames.map((name) => name.toLowerCase());
    for (const [key, value] of Object.entries(metrics)) {
      const lowerKey = key.toLowerCase();
      for (const searchTerm of lowerPossibleNames) if (lowerKey.includes(searchTerm)) return value;
    }
    return undefined;
  }, []);

  const formatDate = useCallback((dateString: string) => {
    if (!dateString) return "N/A";
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return "Invalid Date";
      return new Intl.DateTimeFormat("en-US", {
        month: "short", day: "numeric", hour: "numeric", minute: "numeric", hour12: true,
      }).format(date);
    } catch (e) {
        console.error(LOG_PREFIX, "Error formatting date:", dateString, e);
        return "Date Error";
    }
  }, []);

  const handleViewLocation = () => {
    router.push(`/dashboard/location/${location.id}`);
  };

  // ===== RENDER LOGIC =====

  if (!firebaseContext) {
    return (
        <Card>
            <CardHeader><CardTitle className="flex items-center"><Building className="h-5 w-5 mr-2" />{location.name || "Location"}</CardTitle></CardHeader>
            <CardContent><div className="flex items-center justify-center p-4"><Loader2 className="h-6 w-6 animate-spin text-primary" /> <span className="ml-3 text-muted-foreground">Context initializing...</span></div></CardContent>
            <CardFooter><Button variant="outline" className="w-full" disabled>View Details</Button></CardFooter>
        </Card>
    );
  }

  const { isInitialized: firebaseCoreInitialized, isLoadingConfig: firebaseIsLoadingConfig } = firebaseContext;
  const showLoadingSkeleton = isLoading || !firebaseCoreInitialized || firebaseIsLoadingConfig;

  if (showLoadingSkeleton && !error) {
    return (
        <Card>
            <CardHeader><CardTitle className="flex items-center"><Building className="h-5 w-5 mr-2" />{location.name || "Loading..."}</CardTitle></CardHeader>
            <CardContent className="animate-pulse space-y-3">
                <div className="grid grid-cols-2 gap-2"> <div className="h-5 bg-gray-300 rounded dark:bg-gray-700"></div> <div className="h-5 bg-gray-300 rounded dark:bg-gray-700"></div> </div>
                <div className="space-y-2"> <div className="h-4 bg-gray-300 rounded dark:bg-gray-700 w-1/3"></div> <div className="grid grid-cols-1 gap-2"> <div className="h-10 bg-gray-300 rounded dark:bg-gray-700"></div> <div className="h-10 bg-gray-300 rounded dark:bg-gray-700"></div> </div> </div>
            </CardContent>
            <CardFooter><Button variant="outline" className="w-full" disabled>View Details</Button></CardFooter>
        </Card>
    );
  }

  if (error) {
      return (
          <Card>
              <CardHeader><CardTitle className="flex items-center"><Building className="h-5 w-5 mr-2" />{location.name || "Location"}</CardTitle></CardHeader>
              <CardContent className="text-red-500 flex items-center">
                  <AlertTriangle className="h-5 w-5 mr-2 shrink-0" /> <span>Error: {error}</span>
              </CardContent>
              <CardFooter><Button variant="outline" className="w-full" onClick={handleViewLocation}>View Details</Button></CardFooter>
          </Card>
      );
  }

  if (!locationData) {
      return (
          <Card>
              <CardHeader><CardTitle className="flex items-center"><Building className="h-5 w-5 mr-2" />{location.name || "Location"}</CardTitle></CardHeader>
              <CardContent>No summary data available for this location.</CardContent>
              <CardFooter><Button variant="outline" className="w-full" onClick={handleViewLocation}>View Details</Button></CardFooter>
          </Card>
      );
  }

  const { equipmentCount, alarmCount, displayItems, technicians } = locationData;

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Building className="h-5 w-5 mr-2" />
          {location.name || "Unnamed Location"}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-2">
              <div className="flex items-center">
                <Fan className="h-4 w-4 mr-2 text-blue-500" />
                <span className="text-sm">{equipmentCount} Equipment</span>
              </div>
              <div className="flex items-center">
                <AlertTriangle className={`h-4 w-4 mr-2 ${alarmCount > 0 ? "text-red-500 animate-pulse" : "text-gray-400"}`} />
                <span className="text-sm">{alarmCount} Active Alarms</span>
              </div>
            </div>

            {technicians && technicians.length > 0 && (
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <Wrench className="h-4 w-4 text-gray-500" />
                  <h4 className="text-sm font-medium">Assigned Technicians</h4>
                </div>
                <div className="flex flex-wrap gap-1">
                  {technicians.map((tech) => (
                    <div key={tech.id} className="flex items-center">
                      <span
                        className="px-2 py-1 rounded-full text-xs font-medium"
                        style={{ backgroundColor: `${tech.color || '#cccccc'}20`, color: tech.color || '#333333' }}
                      >
                        {tech.name || "Unknown Tech"}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {displayItems && displayItems.length > 0 && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Key Equipment Status</h4>
                <div className="grid grid-cols-1 gap-2">
                  {displayItems.map((item) => {
                    if (!item || !item.id) {
                      console.warn(LOG_PREFIX, "Invalid display item encountered during map:", item);
                      return null;
                    }
                    const rtData = getEquipmentRealtimeData(item.id, item.name);
                    const metrics = rtData?.metrics || {};
                    const supplyTemp = findMetric(metrics, ["Supply Air Temp", "SupplyAirTemp", "SAT", "DischargeAir", "Supply", "SupplyTemp", "SupplyAir"]);
                    const humidity = findMetric(metrics, ["Humidity", "RelativeHumidity", "RH", "Space Humidity"]);
                    const amps = findMetric(metrics, ["Amps", "Current", "Motor Amps", "PumpAmps"]);

                    return (
                      <div key={item.id} className="flex flex-col p-2 bg-muted dark:bg-slate-800 rounded-md">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Fan className="h-4 w-4 mr-2 text-gray-500" />
                            <span className="text-sm font-medium">{item.name || `Equipment ${item.id.substring(0,6)}`}</span>
                          </div>
                          <span className={`text-xs px-2 py-0.5 rounded-full ${item.status === "Online" || !item.status || (rtData && item.status !== "Offline") ? "bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100" : "bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100"}`}>
                            {item.status || (rtData ? "Online" : "Offline")}
                          </span>
                        </div>

                        {rtData ? (
                          <div className="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-1 text-xs">
                            {supplyTemp !== undefined && (
                              <div className="flex items-center">
                                <Thermometer className="h-3 w-3 mr-1 text-blue-500" />
                                <span>Supply Temp: {Number(supplyTemp).toFixed(1)}°F</span>
                              </div>
                            )}
                            {humidity !== undefined && (
                              <div className="flex items-center">
                                <Droplet className="h-3 w-3 mr-1 text-blue-500" />
                                <span>Humidity: {Number(humidity).toFixed(1)}%</span>
                              </div>
                            )}
                            {amps !== undefined && (
                              <div className="flex items-center">
                                <Activity className="h-3 w-3 mr-1 text-purple-500" />
                                <span>Amps: {Number(amps).toFixed(2)}A</span>
                              </div>
                            )}
                            {rtData.dateTime && (
                              <div className="flex items-center text-muted-foreground mt-1">
                                <Clock className="h-3 w-3 mr-1" />
                                <span>{formatDate(rtData.dateTime)}</span>
                              </div>
                            )}
                          </div>
                        ) : (
                          <div className="mt-2 text-xs text-muted-foreground">No real-time data.</div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" onClick={handleViewLocation} disabled={isLoading || !locationData}>
          View Details
        </Button>
      </CardFooter>
    </Card>
  );
});
